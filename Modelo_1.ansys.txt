!*
!*/INPUT, _codigo/Modelo_1.ansys, txt
!* 
/NOPR 
KEYW, PR_SET, 1 
KEYW, PR_STRUC, 1 
KEYW, PR_THERM, 0 
KEYW, PR_FLUID, 0 
KEYW, PR_ELMAG, 0 
KEYW, MAGNOD, 0 
KEYW, MAGEDG, 0 
KEYW, MAGHFE, 0 
KEYW, MAGELC, 0 
KEYW, PR_MULTI, 0 
/GO
!* 
/SYP, MKDIR, '_imagenes'
/SYP, MKDIR, '_datos'
/SYP, MKDIR, '_archivos'
!* 
/UNITS, MPA
!* 
/TITLE, Modelo 1 para el METODO DE FLEXIBILIDAD DE GRIETAS
/TXTRE, FILE, 51, '_codigo/ansys_logo_transparente', PNG, , PNG
/PLOPTS, DATE, 0
/REPLOT
!*Hecho en ANSYS 2022 R1 Mechanical APDL
!* 
/UIS, MSGPOP, 3
!* 
/PREP7 
!* 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!Selección de los tipos de elementos a utilizar en el proyecto 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
!ET, 1, SOLID186
ET, 1, SOLID185
KEYOPT, 2, 2, 0
KEYOPT, 2, 3, 1
KEYOPT, 2, 6, 0
KEYOPT, 2, 8, 0
!* 
!ET, 2, SHELL281
ET, 2, SHELL181 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!* 
!!!!!!!!!!!!!!!!Creación del material ortotrópico del compuesto 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
UIMP, 1, EX, EY, EZ, 152878, 9962, 9962
UIMP, 1, GXY, GYZ, GXZ, 3703, 4427, 3703
UIMP, 1, PRXY, PRYZ, PRXZ, 0.401, 0.125, 0.401
!*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!Creación de las secciones 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
sect, 1, shell, , 
secdata, 0.2, 1, 89, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 2, shell, , 
secdata, 0.2, 1, -89, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 3, shell, , 
secdata, 0.2, 1, 70, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 4, shell, , 
secdata, 0.2, 1, -70, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 5, shell, , 
secdata, 0.2, 1, 45, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 6, shell, , 
secdata, 0.2, 1, -45, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 7, shell, , 
secdata, 0.2, 1, 30, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 8, shell, , 
secdata, 0.2, 1, -30, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 9, shell, , 
secdata, 0.2, 1, 10, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
sect, 10, shell, , 
secdata, 0.2, 1, -10, 3
secoffset, BOT
seccontrol, , , , , , , 
!*
*DO, i, 1, 10, 1
SECPLOT, i, , , 
/IMAGE, SAVE, '_imagenes/SECCION_%i%'
*ENDDO
!*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!Geometría 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
K, 1, , , , 
KDELE, 1
/AUTO, 1 
/VIEW, 1, 1, 1, 1 
/ANG, 1 
/REP, FAST 
GPLOT
LONGITUD_PROBETA = 25.4
L0 = 3.175 !Longitud de la galga extensometrica
!*
wpro, , , 90.000000
!*
*DO, i, 1, 20, 1
RADIO_MENOR = 49.8+0.2*i
RADIO_MAYOR = 50.0+0.2*i
CYL4, 0, 0, RADIO_MENOR, 0, RADIO_MAYOR, 180, LONGITUD_PROBETA
*ENDDO
!*
wpro, , , -90.000000
!*
K, 1000, , , L0/2, 
KWPAVE, 1000 
KDELE, 1000 
VSBW, ALL
!*
K, 1000, , , 0.1, 
KWPAVE, 1000 
KDELE, 1000 
*DO, i, 21, 59, 2
VSBW, i
*ENDDO
!*
K, 1000, , , -0.1, 
KWPAVE, 1000 
KDELE, 1000
*DO, i, 1, 21, 2
VSBW, i
*ENDDO 
*DO, i, 25, 57, 4
VSBW, i
*ENDDO 
!*
K, 1000, , , -L0/2, 
KWPAVE, 1000 
KDELE, 1000 
*DO, i, 1, 21, 2
VSBW, i
*ENDDO 
*DO, i, 25, 53, 4
VSBW, i
*ENDDO
VSBW, 59
!*
NUMMRG, KP, , , , LOW
WPCSYS, -1, 0
WPSTYLE, , , , , , , , 0 
/AUTO, 1 
/VIEW, 1, 1, 1, 1 
/ANG, 1 
/REP, FAST 
!*
VPLOT
/IMAGE, SAVE, '_imagenes/VOLUMENES'
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!MALLADO 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! 
VATT, 1, , 1, 0
!TAMANIO_MALLA = 1
TAMANIO_MALLA = 2
LESIZE, ALL, TAMANIO_MALLA, , , , , , , 1
!*
*DIM, MALLADO_VOLUMENES, ARRAY, 100, 4, 1
!*
MALLADO_VOLUMENES(1, 1, 1) = 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56
MALLADO_VOLUMENES(19, 1, 1) = 58, 60, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 23, 27, 31, 35, 39, 43
MALLADO_VOLUMENES(37, 1, 1) = 47, 51, 55, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75
MALLADO_VOLUMENES(55, 1, 1) = 76, 77, 78, 79, 80, 81, 101, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92
MALLADO_VOLUMENES(73, 1, 1) = 93, 94, 95, 96, 97, 98, 99, 100, 53, 57, 1, 3, 5, 7, 9, 11, 13, 15
MALLADO_VOLUMENES(91, 1, 1) = 17, 19, 21, 25, 29, 33, 37, 41, 45, 49
!*
MALLADO_VOLUMENES(1, 2, 1) = 164, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227
MALLADO_VOLUMENES(19, 2, 1) = 231, 235, 164, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219
MALLADO_VOLUMENES(37, 2, 1) = 223, 227, 231, 235, 324, 323, 327, 331, 335, 339, 343, 347, 351, 355, 359, 363, 367, 371
MALLADO_VOLUMENES(55, 2, 1) = 375, 379, 383, 387, 391, 395, 324, 323, 327, 331, 335, 339, 343, 347, 351, 355, 359, 363
MALLADO_VOLUMENES(73, 2, 1) = 367, 371, 375, 379, 383, 387, 391, 395, 8, 5, 13, 21, 29, 37, 45, 53, 61, 69
MALLADO_VOLUMENES(91, 2, 1) = 77, 85, 93, 101, 109, 117, 125, 133, 141, 149
!*
MALLADO_VOLUMENES(1, 3, 1) = 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223, 227, 231
MALLADO_VOLUMENES(19, 3, 1) = 235, 239, 163, 167, 171, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 223
MALLADO_VOLUMENES(37, 3, 1) = 227, 231, 235, 239, 323, 327, 331, 335, 339, 343, 347, 351, 355, 359, 363, 367, 371, 375
MALLADO_VOLUMENES(55, 3, 1) = 379, 383, 387, 391, 395, 399, 323, 327, 331, 335, 339, 343, 347, 351, 355, 359, 363, 367
MALLADO_VOLUMENES(73, 3, 1) = 371, 375, 379, 383, 387, 391, 395, 399, 5, 13, 21, 29, 37, 45, 53, 61, 69, 77
MALLADO_VOLUMENES(91, 3, 1) = 85, 93, 101, 109, 117, 125, 133, 141, 149, 157
!*
MALLADO_VOLUMENES(1, 4, 1) = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3
MALLADO_VOLUMENES(19, 4, 1) = 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5
MALLADO_VOLUMENES(37, 4, 1) = 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7
MALLADO_VOLUMENES(55, 4, 1) = 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9
MALLADO_VOLUMENES(73, 4, 1) = 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
MALLADO_VOLUMENES(91, 4, 1) = 10, 9, 8, 7, 6, 5, 4, 3, 2, 1
!*
*DO, i, 1, 100, 1
SECNUM, MALLADO_VOLUMENES(i, 4, 1)
VEORIENT, MALLADO_VOLUMENES(i, 1, 1), KP, MALLADO_VOLUMENES(i, 2, 1), MALLADO_VOLUMENES(i, 3, 1), 
VMESH, MALLADO_VOLUMENES(i, 1, 1)
*ENDDO
EPLOT
/IMAGE, SAVE, '_imagenes/ELEMENTOS'
!*
*DIM, APOYOS, ARRAY, 40, 1, 1
APOYOS(1, 1, 1) = 5, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 83, 89, 95, 101, 107
APOYOS(19, 1, 1) = 113, 119, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84, 90, 96
APOYOS(37, 1, 1) = 102, 108, 114, 120
!*
*DO, kk, 1, 40, 1
DA, APOYOS(kk, 1, 1), ALL, 0
*ENDDO
/IMAGE, SAVE, '_imagenes/APOYOS'
LSCLEAR,ALL
!*
*DO, i, 1, 10, 1
ESEL, S, SEC, , i 
CM, ELEMENTOS_Capa_%i%_%21-i%, ELEM
ALLSEL, ALL
*ENDDO
!*
*DO, i, 1, 20, 1
VSEL, S, , , MALLADO_VOLUMENES(i, 1, 1)
VSEL, A, , , MALLADO_VOLUMENES(i+20, 1, 1)
VSEL, A, , , MALLADO_VOLUMENES(i+40, 1, 1)
VSEL, A, , , MALLADO_VOLUMENES(i+60, 1, 1)
VSEL, A, , , MALLADO_VOLUMENES(i+80, 1, 1)
ESLV, S
CM, ELEMENTOS_CAPA_%i%, ELEM
ALLSEL, ALL
*ENDDO
!*
/VIEW, 1, 1 
/ANG, 1 
/REP, FAST 
/ZOOM, 1, SCRN, 0.343459, 0.558071, 0.376538, 0.483661
/PNUM, KP, 0 
/PNUM, LINE, 0
/PNUM, AREA, 0
/PNUM, VOLU, 0
/PNUM, NODE, 0
/PNUM, TABN, 0
/PNUM, SVAL, 0
/NUMBER, 0 
!* 
/PNUM, SECT, 1
/COLOR,OUTL,BLAC
EPLOT
/IMAGE, SAVE, '_imagenes/SECCIONES'
!*
/PNUM, SECT, 0
/VIEW, 1, 1, 1, 1 
/ANG, 1 
/AUTO, 1 
/REP, FAST 
/REPLOT
!*
*GET, NUMERO_DE_ELEMENTOS, ELEM, , COUNT
*GET, NUMERO_DE_NODOS, NODE, , COUNT
!*
/UIS, MSGPOP, 0
*MSG, UI, NUMERO_DE_ELEMENTOS, NUMERO_DE_NODOS
El número de elementos en el modelo sólido es de %I %/&
El número de nodos en el modelo sólido es de %I
/UIS, MSGPOP, 3
!*
!Solid 186; Tamaño de malla 2
!NODO_POSITIVO = 44
!NODO_NEGATIVO = 47672
!Solid 186; Tamaño de malla 1
!NODO_POSITIVO = 83
!NODO_NEGATIVO = 181556
!Solid 185; Tamaño de malla 1
!NODO_POSITIVO = 42
!NODO_NEGATIVO = 46536
!Solid 185; Tamaño de malla 2
NODO_POSITIVO = 22
NODO_NEGATIVO = 12370
NSEL, S, , , NODO_POSITIVO
CM, extremo_galga_Z_positivo, NODE
ALLSEL, ALL
NSEL, S, , , NODO_NEGATIVO
CM, extremo_galga_Z_negativo, NODE
ALLSEL, ALL
!*
*DIM, BORRAR_VOLUMEN, ARRAY, 10, 1, 1
BORRAR_VOLUMEN(1, 1, 1) = 81, 80, 79, 78, 77, 76, 75, 74, 73, 72
!*
*DO, i, 1, 1, 1
VSEL, S, , , BORRAR_VOLUMEN(i, 1, 1)
ESLV, S
CM, ELEMENTOS_PASO_%i%, ELEM
ALLSEL, ALL
*ENDDO
!*
*DIM, FUERZA_AREAS, ARRAY, 10, 2, 1
FUERZA_AREAS(1, 1, 1) = 320, 315, 310, 305, 250, 231, 212, 193, 169, 150
FUERZA_AREAS(1, 2, 1) = 420, 415, 410, 405, 400, 395, 390, 385, 380, 375
!*
*DIM, MATRIZ_DE_COMPLIANCIAS, ARRAY, 10, 10, 1
*DIM, DESPLAZAMIENTO_NODO_POSITIVO, ARRAY, 10, 10, 1
*DIM, DESPLAZAMIENTO_NODO_NEGATIVO, ARRAY, 10, 10, 1
!*
*SET, NUMERO_DE_ITERACIONES, 0
!*
/COLOR,OUTL,DGRA
/VIEW, 1, 1 
/ANG, 1 
/REP, FAST 
/ZOOM, 1, SCRN, 0.3245, 0.566, 0.32, 0.501
!*
*DIM, duraciones_de_pasos, ARRAY, 55, 2, 1
*GET, tiempo_0, ACTIVE, , TIME, CPU
tiempo_00 = tiempo_0
!*
CDWRITE, ALL, '_archivos/prueba_corridas', 'cdb', , '_archivos/prueba_corridas%', 'iges' 
CDWRITE, DB, '_archivos/prueba_corridas_DB', 'cdb', , '', '' 
!*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!! Comienzo de las iteraciones
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!*
*DO, jj, 1, 1, 1
VCLEAR, BORRAR_VOLUMEN(jj, 1, 1)
VDELE, BORRAR_VOLUMEN(jj, 1, 1)
/REPLOT
/IMAGE, SAVE, '_imagenes/PASO_%jj%'
CDWRITE, ALL, '_archivos/prueba_corridas_paso_%jj%', 'cdb', , '_archivos/prueba_corridas_paso_%jj%', 'iges' 
CDWRITE, DB, '_archivos/prueba_corridas_paso_%jj%_DB', 'cdb', , '', '' 
!Estabamos en el preprocesado /PREP7 
FINISH 
!* 
*DO, ii, 1, jj, 1
!* 
/SOL
ANTYPE, 0
!* 
*DO, kk, 1, 40, 1
DA, APOYOS(kk, 1, 1), ALL, 0
*ENDDO
!* 
SFA, FUERZA_AREAS(ii, 1, 1), 1, PRES, -1 
SFA, FUERZA_AREAS(ii, 2, 1), 1, PRES, -1 
NUMERO_DE_ITERACIONES = 1+NUMERO_DE_ITERACIONES
/IMAGE, SAVE, '_imagenes/CARGAS_%NUMERO_DE_ITERACIONES%'
/STATUS, SOLU
SOLVE 
FINISH
/POST1 
SET, LAST
*GET, DESPLAZAMIENTO_NODO_POSITIVO(jj, ii, 1), NODE, NODO_POSITIVO, U, Z
*GET, DESPLAZAMIENTO_NODO_NEGATIVO(jj, ii, 1), NODE, NODO_NEGATIVO, U, Z
MATRIZ_DE_COMPLIANCIAS (jj, ii, 1) = (2*DESPLAZAMIENTO_NODO_POSITIVO(jj, ii, 1))/L0
FINISH
/SOL
LSCLEAR, ALL
FINISH
/PREP7 
!*
*GET, tiempo_1, ACTIVE, , TIME, CPU
duraciones_de_pasos(NUMERO_DE_ITERACIONES, 1, 1) = NUMERO_DE_ITERACIONES
duraciones_de_pasos(NUMERO_DE_ITERACIONES, 2, 1) = tiempo_1-tiempo_0
tiempo_0 = tiempo_1
!*
/UIS, MSGPOP, 0
*MSG, NOTE, jj, ii, NUMERO_DE_ITERACIONES, duraciones_de_pasos(NUMERO_DE_ITERACIONES, 2, 1)
El número de paso es %I. %/&
El subpaso es el %I. %/&
El número total de iteraciones hasta el momento es de %I. %/&
La duracion de esta corrida es de %G segundos.
/UIS, MSGPOP, 3
!*
*ENDDO
*ENDDO
!*
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!! Fin de las iteraciones
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!*
*STATUS, MATRIZ_DE_COMPLIANCIAS, , , , , , , , , , , 0
!*
*GET, E_x, EX, 1, TEMP, , 
*GET, E_y, EY, 1, TEMP, , 
*GET, E_z, EZ, 1, TEMP, , 
*GET, G_xy, GXY, 1, TEMP, , 
*GET, G_yz, GYZ, 1, TEMP, , 
*GET, G_xz, GXZ, 1, TEMP, , 
*GET, PR_xy, PRXY, 1, TEMP, , 
*GET, PR_yz, PRYZ, 1, TEMP, , 
*GET, PR_xz, PRXZ, 1, TEMP, , 
!*
*DIM, prop_material, ARRAY, 9, 1, 1
prop_material(1) = E_x/1000, E_y/1000, E_z/1000, PR_xy, PR_yz, PR_xz, G_xy/1000, G_yz/1000, G_xz/1000
!*
*DIM, prop_material_string, STRING, 8, 9 !Creo una matriz de cadena de caracteres de 9 filas y 8 digitos como máximo
prop_material_string(1, 1) = 'E_x'
prop_material_string(1, 2) = 'E_y'
prop_material_string(1, 3) = 'E_z'
prop_material_string(1, 4) = 'NU_xy'
prop_material_string(1, 5) = 'NU_yz'
prop_material_string(1, 6) = 'NU_xz'
prop_material_string(1, 7) = 'G_xy'
prop_material_string(1, 8) = 'G_yz'
prop_material_string(1, 9) = 'G_xz'
!*
*DIM, prop_material_string_unidades, STRING, 8, 9
prop_material_string_unidades(1, 1) = 'GPa'
prop_material_string_unidades(1, 2) = 'GPa'
prop_material_string_unidades(1, 3) = 'GPa'
prop_material_string_unidades(1, 4) = 'mm/mm'
prop_material_string_unidades(1, 5) = 'mm/mm'
prop_material_string_unidades(1, 6) = 'mm/mm'
prop_material_string_unidades(1, 7) = 'GPa'
prop_material_string_unidades(1, 8) = 'GPa'
prop_material_string_unidades(1, 9) = 'GPa'
!*
*cfopen, _datos/material_corrida_1, txt
*VWRITE, prop_material_string(1, 1), ':', prop_material(1), prop_material_string_unidades(1, 1)
(A5, A3, g16.6, A5)
*cfclos
!*
*DIM, pasos, STRING, 8, 10 !Creo una matriz de cadena de caracteres de 9 filas y 8 digitos como máximo
pasos(1, 1) = 'Paso 01:'
pasos(1, 2) = 'Paso 02:'
pasos(1, 3) = 'Paso 03:'
pasos(1, 4) = 'Paso 04:'
pasos(1, 5) = 'Paso 05:'
pasos(1, 6) = 'Paso 06:'
pasos(1, 7) = 'Paso 07:'
pasos(1, 8) = 'Paso 08:'
pasos(1, 9) = 'Paso 09:'
pasos(1, 10) = 'Paso 10:'
!*
*cfopen, _datos/matriz_de_compliancias, txt
*VWRITE, pasos(1, 1), ' ', MATRIZ_DE_COMPLIANCIAS(1, 1), MATRIZ_DE_COMPLIANCIAS(1, 2), MATRIZ_DE_COMPLIANCIAS(1, 3), MATRIZ_DE_COMPLIANCIAS(1, 4), MATRIZ_DE_COMPLIANCIAS(1, 5), MATRIZ_DE_COMPLIANCIAS(1, 6), MATRIZ_DE_COMPLIANCIAS(1, 7), MATRIZ_DE_COMPLIANCIAS(1, 8), MATRIZ_DE_COMPLIANCIAS(1, 9), MATRIZ_DE_COMPLIANCIAS(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*cfclos
!*
*cfopen, _datos/matriz_de_desplazamientos_nodo_positivo, txt
*VWRITE, pasos(1, 1), ' ', DESPLAZAMIENTO_NODO_POSITIVO(1, 1), DESPLAZAMIENTO_NODO_POSITIVO(1, 2), DESPLAZAMIENTO_NODO_POSITIVO(1, 3), DESPLAZAMIENTO_NODO_POSITIVO(1, 4), DESPLAZAMIENTO_NODO_POSITIVO(1, 5), DESPLAZAMIENTO_NODO_POSITIVO(1, 6), DESPLAZAMIENTO_NODO_POSITIVO(1, 7), DESPLAZAMIENTO_NODO_POSITIVO(1, 8), DESPLAZAMIENTO_NODO_POSITIVO(1, 9), DESPLAZAMIENTO_NODO_POSITIVO(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*cfclos
!*
*cfopen, _datos/matriz_de_desplazamientos_nodo_negativo, txt
*VWRITE, pasos(1, 1), ' ', DESPLAZAMIENTO_NODO_NEGATIVO(1, 1), DESPLAZAMIENTO_NODO_NEGATIVO(1, 2), DESPLAZAMIENTO_NODO_NEGATIVO(1, 3), DESPLAZAMIENTO_NODO_NEGATIVO(1, 4), DESPLAZAMIENTO_NODO_NEGATIVO(1, 5), DESPLAZAMIENTO_NODO_NEGATIVO(1, 6), DESPLAZAMIENTO_NODO_NEGATIVO(1, 7), DESPLAZAMIENTO_NODO_NEGATIVO(1, 8), DESPLAZAMIENTO_NODO_NEGATIVO(1, 9), DESPLAZAMIENTO_NODO_NEGATIVO(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*cfclos
!*
segundos_totales = tiempo_1-tiempo_00
horas = (segundos_totales-MOD(segundos_totales, 3600))/3600
minutos = (MOD(segundos_totales, 3600)-MOD(MOD(segundos_totales, 3600), 60))/60
segundos = segundos_totales-3600*horas-60*minutos
!*
*cfopen, _datos/duraciones_de_pasos, txt
*VWRITE, duraciones_de_pasos(1, 1), duraciones_de_pasos(1, 2)
(F8.0, g16.6)
*cfclos
!*
AATT, 1, , 2, 0, 1
AMESH, 277
AMESH, 524
AMESH, 329
AMESH, 13
AMESH, 129
VCLEAR, ALL
VDELE, ALL, , , 1
AGEN, 2, 277, , , , , , , 0
AGEN, 2, 524, , , , , , , 0 
AGEN, 2, 329, , , , , , , 0 
AGEN, 2, 13, , , , , , , 0 
AGEN, 2, 129, , , , , , , 0 
ACLEAR, 277
ACLEAR, 524
ACLEAR, 329
ACLEAR, 13
ACLEAR, 129
ADELE, 277, , , 1
ADELE, 524, , , 1
ADELE, 329, , , 1
ADELE, 13, , , 1
ADELE, 129, , , 1
GPLOT
/VIEW, 1, 1, 1, 1 
/ANG, 1 
/AUTO, 1 
/REP, FAST
/COLOR,OUTL,WHIT
EPLOT
/IMAGE, SAVE, '_imagenes/SHELL'
CDWRITE, DB, '_archivos/prueba_corridas_shell_DB', 'cdb', , '', '' 
CDWRITE, ALL, '_archivos/prueba_corridas_shell', 'cdb', , '_archivos/prueba_corridas_shell', 'iges' 
!*
*DIM, texto_resumen_1, STRING, 100, 1
texto_resumen_1(1, 1) = 'Modelo de elementos finitos para el "Método de flexibilidad de Grietas" resuelto en ANSYS APDL.'
*DIM, texto_resumen_2, STRING, 100, 1
texto_resumen_2(1, 1) = 'Realizado por Ing. Gustavo F. Eichhorn'
*DIM, texto_resumen_3, STRING, 100, 1
texto_resumen_3(1, 1) = 'E-Mail: eichhorn.gustavof@gmail.com '
*DIM, texto_resumen_4, STRING, 100, 1
texto_resumen_4(1, 1) = 'Tipos de elementos utilizados: '
*DIM, texto_resumen_5, STRING, 100, 1
texto_resumen_5(1, 1) = 'Propiedades elasticas ortotrópicas de laminado compuesto utilizado:'
!*
*CFOPEN, _datos2/RESUMEN, txt, , 
*VWRITE, texto_resumen_1(1),texto_resumen_1(9),texto_resumen_1(17),texto_resumen_1(25),texto_resumen_1(33),texto_resumen_1(41),texto_resumen_1(49),texto_resumen_1(57),texto_resumen_1(65),texto_resumen_1(73),texto_resumen_1(81),texto_resumen_1(89)
(12A)
*VWRITE, ' '
(A3)
*VWRITE, texto_resumen_2(1),texto_resumen_2(9),texto_resumen_2(17),texto_resumen_2(25),texto_resumen_2(33)
(5A)
*VWRITE, ' '
(A3)
*VWRITE, texto_resumen_3(1),texto_resumen_3(9),texto_resumen_3(17),texto_resumen_3(25),texto_resumen_3(33)
(5A)
*VWRITE, ' '
(A3)
*VWRITE, texto_resumen_4(1),texto_resumen_4(9),texto_resumen_4(17),texto_resumen_4(25)
(4A)
*VWRITE, 'SOLID186',
(A)
*VWRITE, 'SHELL281'
(A)
*VWRITE, ' '
(A3)
*VWRITE, 'Cantidad',' de nodo','s y de e','lementos',':'
(5A)
*VWRITE, 'Nodos: ', CHRVAL(NUMERO_DE_NODOS) 
(3A)
*VWRITE, 'Elemento','s: ', CHRVAL(NUMERO_DE_ELEMENTOS)
(A,A3,2A)
*VWRITE, ' '
(A3)
*VWRITE, texto_resumen_5(1),texto_resumen_5(9),texto_resumen_5(17),texto_resumen_5(25),texto_resumen_5(33),texto_resumen_5(41),texto_resumen_5(49),texto_resumen_5(57),texto_resumen_5(65)
(9A)
*VWRITE, prop_material_string(1, 1), ':', prop_material(1), prop_material_string_unidades(1, 1)
(A5, A3, g16.6, A5)
*VWRITE, ' '
(A3)
*VWRITE, 'Matriz d', 'e flexib', 'ilidad (', 'o de com', 'pliancia', 's):'
(6A)
*VWRITE, pasos(1, 1), ' ', MATRIZ_DE_COMPLIANCIAS(1, 1), MATRIZ_DE_COMPLIANCIAS(1, 2), MATRIZ_DE_COMPLIANCIAS(1, 3), MATRIZ_DE_COMPLIANCIAS(1, 4), MATRIZ_DE_COMPLIANCIAS(1, 5), MATRIZ_DE_COMPLIANCIAS(1, 6), MATRIZ_DE_COMPLIANCIAS(1, 7), MATRIZ_DE_COMPLIANCIAS(1, 8), MATRIZ_DE_COMPLIANCIAS(1, 9), MATRIZ_DE_COMPLIANCIAS(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*VWRITE, ' '
(A3)
*VWRITE, 'Matriz ', 'de ', 'desplaza', 'miento ', 'del nodo', ' positiv', 'o de la ', 'galga:'
(A, A3, A, A7, 3A, A6)
*VWRITE, pasos(1, 1), ' ', DESPLAZAMIENTO_NODO_POSITIVO(1, 1), DESPLAZAMIENTO_NODO_POSITIVO(1, 2), DESPLAZAMIENTO_NODO_POSITIVO(1, 3), DESPLAZAMIENTO_NODO_POSITIVO(1, 4), DESPLAZAMIENTO_NODO_POSITIVO(1, 5), DESPLAZAMIENTO_NODO_POSITIVO(1, 6), DESPLAZAMIENTO_NODO_POSITIVO(1, 7), DESPLAZAMIENTO_NODO_POSITIVO(1, 8), DESPLAZAMIENTO_NODO_POSITIVO(1, 9), DESPLAZAMIENTO_NODO_POSITIVO(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*VWRITE, ' '
(A3)
*VWRITE, 'Matriz ', 'de ', 'desplaza', 'miento ', 'del nodo', ' negativ', 'o de la ', 'galga:'
(A, A3, A, A7, 3A, A6)
*VWRITE, pasos(1, 1), ' ', DESPLAZAMIENTO_NODO_NEGATIVO(1, 1), DESPLAZAMIENTO_NODO _NEGATIVO(1, 2), DESPLAZAMIENTO_NODO _NEGATIVO(1, 3), DESPLAZAMIENTO_NODO _NEGATIVO(1, 4), DESPLAZAMIENTO_NODO _NEGATIVO(1, 5), DESPLAZAMIENTO_NODO _NEGATIVO(1, 6), DESPLAZAMIENTO_NODO _NEGATIVO(1, 7), DESPLAZAMIENTO_NODO _NEGATIVO(1, 8), DESPLAZAMIENTO_NODO _NEGATIVO(1, 9), DESPLAZAMIENTO_NODO _NEGATIVO(1, 10)
(A8, A3, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6, g16.6)
*VWRITE, ' '
(A3)
*VWRITE, 'Duracion', ' total d', 'e la sim', 'ulacion:', ' ', segundos_totales, ' segundo', 's. (', CHRVAL(horas), 'hr;', CHRVAL(minutos), 'min;', CHRVAL(segundos), 'seg).'
(4A, A1, g16.6, A, A4, A2, A3, A2, A4, A, A5)
*cfclos
!*
/UIS, MSGPOP, 0
*MSG, NOTE, NUMERO_DE_ITERACIONES, segundos_totales, horas, minutos, segundos
El programa ha finalizado de ejecutar el analisis. %/&
El número de iteraciones en total es de %I ejecuciones. %/&
La duracion de esta corrida es de %G segundos (%I hr; %I min; %G seg).
/UIS, MSGPOP, 3
!* 

